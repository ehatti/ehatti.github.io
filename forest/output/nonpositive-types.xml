<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="default.xsl"?>
<fr:tree toc="true" numbered="true" show-heading="true" show-metadata="true" expanded="true" root="false" xmlns:fr="http://www.jonmsterling.com/jms-005P.xml">
  <fr:frontmatter>
    <fr:anchor>437</fr:anchor>
    <fr:addr type="user">nonpositive-types</fr:addr>
    <fr:route>nonpositive-types.xml</fr:route>
    <fr:title text="Nonpositive Types">Nonpositive Types</fr:title>
    <fr:taxon>Definition</fr:taxon>
    <fr:authors />
  </fr:frontmatter>
  <fr:mainmatter>
    <fr:p>TODO</fr:p>
  </fr:mainmatter>
  <fr:backmatter>
    <fr:tree toc="false" numbered="false" show-heading="true" show-metadata="false" expanded="true" root="false" xmlns:fr="http://www.jonmsterling.com/jms-005P.xml">
      <fr:frontmatter>
        <fr:title text="Backlinks">Backlinks</fr:title>
        <fr:authors />
      </fr:frontmatter>
      <fr:mainmatter>
        <fr:tree toc="true" numbered="false" show-heading="true" show-metadata="true" expanded="false" root="false" xmlns:fr="http://www.jonmsterling.com/jms-005P.xml">
          <fr:frontmatter>
            <fr:anchor>438</fr:anchor>
            <fr:addr type="user">pages</fr:addr>
            <fr:route>pages.xml</fr:route>
            <fr:title text="All Pages">All Pages</fr:title>
            <fr:authors />
          </fr:frontmatter>
          <fr:mainmatter>
            <fr:p>
              <fr:ul>
                <fr:li><fr:strong>Definition</fr:strong>. <fr:link type="local" href="admissible-rule.xml" addr="admissible-rule" title="Admissible Rules">Admissible Rules</fr:link></fr:li>
                <fr:li><fr:strong>Definition</fr:strong>. <fr:link type="local" href="algebra.xml" addr="algebra" title="Algebra">Algebra</fr:link></fr:li>
                <fr:li><fr:strong>Definition</fr:strong>. <fr:link type="local" href="categories-with-families.xml" addr="categories-with-families" title="Categories with Families">Categories with Families</fr:link></fr:li>
                <fr:li><fr:strong>Definition</fr:strong>. <fr:link type="local" href="debruijn.xml" addr="debruijn" title="DeBruijn Indices">DeBruijn Indices</fr:link></fr:li>
                <fr:li><fr:strong>Definition</fr:strong>. <fr:link type="local" href="elaboration-formal.xml" addr="elaboration-formal" title="Elaboration, Formally">Elaboration, Formally</fr:link></fr:li>
                <fr:li><fr:strong>Discussion</fr:strong>. <fr:link type="local" href="elaboration-intuition.xml" addr="elaboration-intuition" title="Elaboration, Intuitively">Elaboration, Intuitively</fr:link></fr:li>
                <fr:li><fr:strong>Definition</fr:strong>. <fr:link type="local" href="elaboration.xml" addr="elaboration" title="Elaboration">Elaboration</fr:link></fr:li>
                <fr:li><fr:strong>Definition</fr:strong>. <fr:link type="local" href="first-order-theory.xml" addr="first-order-theory" title="Theories">Theories</fr:link></fr:li>
                <fr:li><fr:strong>Discussion</fr:strong>. <fr:link type="local" href="hoas-cons.xml" addr="hoas-cons" title="Cons of HOAS">Cons of HOAS</fr:link></fr:li>
                <fr:li><fr:strong>Discussion</fr:strong>. <fr:link type="local" href="hoas-disc.xml" addr="hoas-disc" title="Higher-Order Abstract Syntax">Higher-Order Abstract Syntax</fr:link></fr:li>
                <fr:li><fr:strong>Discussion</fr:strong>. <fr:link type="local" href="hoas-pros.xml" addr="hoas-pros" title="Pros of HOAS">Pros of HOAS</fr:link></fr:li>
                <fr:li><fr:strong>Definition</fr:strong>. <fr:link type="local" href="hoas.xml" addr="hoas" title="Higher-Order Abstract Syntax">Higher-Order Abstract Syntax</fr:link></fr:li>
                <fr:li><fr:strong>Definition</fr:strong>. <fr:link type="local" href="judgement.xml" addr="judgement" title="Judgements">Judgements</fr:link></fr:li>
                <fr:li><fr:strong>Discussion</fr:strong>. <fr:link type="local" href="judgements-disc.xml" addr="judgements-disc" title="Judgements">Judgements</fr:link></fr:li>
                <fr:li><fr:strong>Definition</fr:strong>. <fr:link type="local" href="kernel.xml" addr="kernel" title="Kernel Languages">Kernel Languages</fr:link></fr:li>
                <fr:li><fr:strong>Discussion</fr:strong>. <fr:link type="local" href="locally-nameless-disc.xml" addr="locally-nameless-disc" title="Locally Nameless">Locally Nameless</fr:link></fr:li>
                <fr:li><fr:strong>Definition</fr:strong>. <fr:link type="local" href="locally-nameless.xml" addr="locally-nameless" title="Locally Nameless">Locally Nameless</fr:link></fr:li>
                <fr:li><fr:strong>Discussion</fr:strong>. <fr:link type="local" href="macro-elab-definition.xml" addr="macro-elab-definition" title="A Macro-Based Explanation of Elaboration">A Macro-Based Explanation of Elaboration</fr:link></fr:li>
                <fr:li><fr:strong>Definition</fr:strong>. <fr:link type="local" href="macro-expansion.xml" addr="macro-expansion" title="Macro Expansion">Macro Expansion</fr:link></fr:li>
                <fr:li><fr:strong>Discussion</fr:strong>. <fr:link type="local" href="mltt-disc.xml" addr="mltt-disc" title="Martin-Löf Type Theory">Martin-Löf Type Theory</fr:link></fr:li>
                <fr:li><fr:strong>Definition</fr:strong>. <fr:link type="local" href="mltt-pi-rules.xml" addr="mltt-pi-rules" title="Rules for Pi Types in MLTT">Rules for Pi Types in MLTT</fr:link></fr:li>
                <fr:li><fr:strong>Remark</fr:strong>. <fr:link type="local" href="mltt-pres-trad.xml" addr="mltt-pres-trad" title="Traditional Presentation of MLTT">Traditional Presentation of MLTT</fr:link></fr:li>
                <fr:li><fr:strong>Definition</fr:strong>. <fr:link type="local" href="mltt.xml" addr="mltt" title="Martin-Löf Type Theory">Martin-Löf Type Theory</fr:link></fr:li>
                <fr:li><fr:strong>Definition</fr:strong>. <fr:link type="local" href="named-variables.xml" addr="named-variables" title="Named Variables">Named Variables</fr:link></fr:li>
                <fr:li><fr:strong>Definition</fr:strong>. <fr:link type="local" href="nonpositive-types.xml" addr="nonpositive-types" title="Nonpositive Types">Nonpositive Types</fr:link></fr:li>
                <fr:li><fr:strong>Remark</fr:strong>. <fr:link type="local" href="programming-language-explosion.xml" addr="programming-language-explosion" title="Continued Explosion of Programming Languages">Continued Explosion of Programming Languages</fr:link></fr:li>
                <fr:li><fr:strong>Problem</fr:strong>. <fr:link type="local" href="proof-assistant-explosion.xml" addr="proof-assistant-explosion" title="Constructing Proof Assistants">Constructing Proof Assistants</fr:link></fr:li>
                <fr:li><fr:strong>Remark</fr:strong>. <fr:link type="local" href="readable-theorems.xml" addr="readable-theorems" title="Should Kernel Theorems be Readable?">Should Kernel Theorems be Readable?</fr:link></fr:li>
                <fr:li><fr:strong>Remark</fr:strong>. <fr:link type="local" href="rel-judgements-fol.xml" addr="rel-judgements-fol" title="Judgements and FOL">Judgements and FOL</fr:link></fr:li>
                <fr:li><fr:strong>Remark</fr:strong>. <fr:link type="local" href="rel-judgements-natural-deduction.xml" addr="rel-judgements-natural-deduction" title="Judgements and Natural Deduction">Judgements and Natural Deduction</fr:link></fr:li>
                <fr:li><fr:strong>Definition</fr:strong>. <fr:link type="local" href="signature.xml" addr="signature" title="Signatures">Signatures</fr:link></fr:li>
                <fr:li><fr:strong>Lemma</fr:strong>. <fr:link type="local" href="srs-eager-is-eager.xml" addr="srs-eager-is-eager" title="Eager Evaluation is Eager">Eager Evaluation is Eager</fr:link></fr:li>
                <fr:li><fr:strong>Proof</fr:strong>. <fr:link type="local" href="srs-eager-prop-proof.xml" addr="srs-eager-prop-proof" title="Local Rewriting Preserves Normal Forms">Local Rewriting Preserves Normal Forms</fr:link></fr:li>
                <fr:li><fr:strong>Theorem</fr:strong>. <fr:link type="local" href="srs-eager-prop.xml" addr="srs-eager-prop" title="Local Rewriting Preserves Normal Forms">Local Rewriting Preserves Normal Forms</fr:link></fr:li>
                <fr:li><fr:strong>Theorem</fr:strong>. <fr:link type="local" href="srs-eager-twice-noop.xml" addr="srs-eager-twice-noop" title="Normalizing Normalize Does Nothing">Normalizing Normalize Does Nothing</fr:link></fr:li>
                <fr:li><fr:strong>Definition</fr:strong>. <fr:link type="local" href="srs-eager.xml" addr="srs-eager" title="Eager Evaluation in String Rewrite Systems">Eager Evaluation in String Rewrite Systems</fr:link></fr:li>
                <fr:li><fr:strong>Definition</fr:strong>. <fr:link type="local" href="string-rewrite-system.xml" addr="string-rewrite-system" title="String Rewrite System">String Rewrite System</fr:link></fr:li>
                <fr:li><fr:strong>Definition</fr:strong>. <fr:link type="local" href="tactics.xml" addr="tactics" title="Tactics">Tactics</fr:link></fr:li>
                <fr:li><fr:strong>Discussion</fr:strong>. <fr:link type="local" href="tt-as-algebra.xml" addr="tt-as-algebra" title="Type Theories as Algebraic Theories">Type Theories as Algebraic Theories</fr:link></fr:li>
                <fr:li><fr:strong>Discussion</fr:strong>. <fr:link type="local" href="tt-as-cwf.xml" addr="tt-as-cwf" title="Type Theories as Categories with Families">Type Theories as Categories with Families</fr:link></fr:li>
                <fr:li><fr:strong>Discussion</fr:strong>. <fr:link type="local" href="type-theory.xml" addr="type-theory" title="Type Theory">Type Theory</fr:link></fr:li>
                <fr:li><fr:strong>Definition</fr:strong>. <fr:link type="local" href="vernacular.xml" addr="vernacular" title="Vernacular Languages">Vernacular Languages</fr:link></fr:li>
                <fr:li><fr:strong>Discussion</fr:strong>. <fr:link type="local" href="when-nonpos-okay.xml" addr="when-nonpos-okay" title="When Nonpositivity is Acceptable">When Nonpositivity is Acceptable</fr:link></fr:li>
                <fr:li><fr:strong>Remark</fr:strong>. <fr:link type="local" href="why-formal-elab.xml" addr="why-formal-elab" title="Why Formalize Elaboration?">Why Formalize Elaboration?</fr:link></fr:li>
              </fr:ul>
            </fr:p>
          </fr:mainmatter>
          <fr:backmatter />
        </fr:tree>
        <fr:tree toc="true" numbered="false" show-heading="true" show-metadata="true" expanded="false" root="false" xmlns:fr="http://www.jonmsterling.com/jms-005P.xml">
          <fr:frontmatter>
            <fr:anchor>439</fr:anchor>
            <fr:addr type="user">hoas-cons</fr:addr>
            <fr:route>hoas-cons.xml</fr:route>
            <fr:title text="Cons of HOAS">Cons of HOAS</fr:title>
            <fr:taxon>Discussion</fr:taxon>
            <fr:authors />
          </fr:frontmatter>
          <fr:mainmatter>
            <fr:p>The first con of HOAS is that inspecting terms under a binder becomes impossible. Imagine that you want to implement an operation that checks if a term is equal to the identity function. How will you implement this?
  <fr:pre>isIdentity :: Term -&gt; Bool
isIdentity (Lam e) = ...
isIdentity (App _ _) = False</fr:pre>
  How do you fill in the <fr:code>...</fr:code>? You can't pattern-match on <fr:code>e</fr:code> because it's a function, so you have to call it on something. You could just pick some arbitrary term to plug in and treat every occurance of that term as if it were a variable, but you have no assurance that a user will never actually write that term, which would cause your algorithm to produce incorrect results.</fr:p>
            <fr:p>This problem is solvable with some extra work though. If you want to inspect under a binder encoded with HOAS, the correct approach is to add back the explicit variable constructor to your model.
  <fr:pre>-- HOAS in Haskell
data Term
  = Var String
  | Lam (Term -&gt; Term)
  | App Term Term</fr:pre>
  Here I've chosen variables to contain <fr:code>String</fr:code>s that we can use to check equality of variables, but you could pick any other type to represent them. This approach is in fact the <fr:link type="local" href="locally-nameless.xml" addr="locally-nameless" title="Locally Nameless">locally nameless</fr:link> approach, which comes with its own <fr:link type="local" href="locally-nameless-disc.xml" addr="locally-nameless-disc" title="Locally Nameless">pros and cons</fr:link>.</fr:p>
            <fr:p>The next cons apply to HOAS's use in proof assistants. First, <fr:link type="local" href="when-nonpos-okay.xml" addr="when-nonpos-okay" title="When Nonpositivity is Acceptable">most</fr:link> proof assistants don't permit HOAS in the first place! HOAS is a <fr:link type="local" href="nonpositive-types.xml" addr="nonpositive-types" title="Nonpositive Types">nonpositive type</fr:link>, so proof assistants will reject it as an invalid inductive type. For instance, Rocq gives the following error.
  <fr:pre>Inductive term :=
| Lam (e : term -&gt; term)
| App (f : term) (a : term).</fr:pre>
  <fr:pre>Error: Non strictly positive occurrence of "term" in "(term -&gt; term) -&gt; term".</fr:pre>
  Unless you disable the positivity checker and thus make the proof assistant inconsistent, you won't be able to use HOAS.</fr:p>
            <fr:p>However, let's say that you are okay with the possible inconsistency. If so, you will still run into another problem, which is that HOAS invalidates easy theorems we expect to hold for our languages. For instance, in most languages first-class functions may not be inspected as data. They are opaque code, and the only thing you can do with them is apply them to arguments. This is an important theorem we want to be able to prove when formalizing languages in a proof assistant, and it is false if you use HOAS! Take the following term as an example, using the representation we defined in Rocq.
  <fr:pre>Definition exotic : term :=
  Lam (fun x =&gt;
    match x with
    | Lam _ =&gt; x
    | App _ _ =&gt; App x x
    end)</fr:pre>
   These kinds of terms are called "exotic terms". The lambda calculus as it is defined mathematically does not allow exotic terms, but in our model they is indeed definable. Thus, HOAS does not allow you to properly model the lambda calculus. The same problem holds for any language (most languages) where we prohibit code to be inspected like data.</fr:p>
            <fr:p>A final con of HOAS is that the expressivity of the metalanguage limits how useful this approach is. For instance, if the metalanguage lacks first-class functions, the advantages of HOAS with be dubious, as it may be as hard to use HOAS as it would be to use an approach like DeBruijn indices. This is not <fr:em>too</fr:em> much of a problem in practice now that most modern languages have first-class functions and closures.</fr:p>
          </fr:mainmatter>
          <fr:backmatter />
        </fr:tree>
      </fr:mainmatter>
      <fr:backmatter />
    </fr:tree>
  </fr:backmatter>
</fr:tree>
