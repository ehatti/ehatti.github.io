<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="default.xsl"?>
<fr:tree toc="true" numbered="true" show-heading="true" show-metadata="true" expanded="true" root="false" xmlns:fr="http://www.jonmsterling.com/jms-005P.xml">
  <fr:frontmatter>
    <fr:anchor>252</fr:anchor>
    <fr:addr type="user">macro-elab-definition</fr:addr>
    <fr:route>macro-elab-definition.xml</fr:route>
    <fr:title text="A Macro-Based Explanation of Elaboration">A Macro-Based Explanation of Elaboration</fr:title>
    <fr:taxon>Discussion</fr:taxon>
    <fr:authors />
  </fr:frontmatter>
  <fr:mainmatter>
    <fr:p>A preliminary definition of <fr:link type="local" href="elaboration.xml" addr="elaboration" title="Elaboration">elaboration</fr:link> we may use essentially just captures the initial <fr:link type="local" href="elaboration-intuition.xml" addr="elaboration-intuition" title="Elaboration, Intuitively">intuition for elaboration</fr:link> in a more systematic way. An elaborator is quite literally just a set of syntactic macro rules which may both spawn and solve <fr:em>metavariables</fr:em>. Furthermore the macros have access to the <fr:em>goal type</fr:em>, which captures the type-directed nature of elaboration.</fr:p>
    <fr:p>The macro rules are permitted to executed arbitrary code in some metalanguage, which allows for typeclass resolution, unification, and etc to be implemented. This is essentially the direction that Lean 4 seems to have gone -- the user at any point may insert arbitrary definitions of new syntax and transformations on that syntax, and elaboration recursively expands macros until it cannot anymore.</fr:p>
    <fr:p>This definition is very unsatisfying mathematically though! This is because all it does is capture the initial intuition. Tt provides no new information nor insights into what elaboration <fr:em>should</fr:em> be, nor what it is in relation to the rest of mathematics. Thus this definition is unsuitable for a formalization of elaboration.</fr:p>
  </fr:mainmatter>
  <fr:backmatter>
    <fr:tree toc="false" numbered="false" show-heading="true" show-metadata="false" expanded="true" root="false" xmlns:fr="http://www.jonmsterling.com/jms-005P.xml">
      <fr:frontmatter>
        <fr:title text="Context">Context</fr:title>
        <fr:authors />
      </fr:frontmatter>
      <fr:mainmatter>
        <fr:tree toc="true" numbered="false" show-heading="true" show-metadata="true" expanded="false" root="false" xmlns:fr="http://www.jonmsterling.com/jms-005P.xml">
          <fr:frontmatter>
            <fr:anchor>253</fr:anchor>
            <fr:addr type="user">elaboration</fr:addr>
            <fr:route>elaboration.xml</fr:route>
            <fr:title text="Elaboration">Elaboration</fr:title>
            <fr:taxon>Definition</fr:taxon>
            <fr:authors />
          </fr:frontmatter>
          <fr:mainmatter>
            <fr:tree toc="true" numbered="true" show-heading="true" show-metadata="false" expanded="true" root="false" xmlns:fr="http://www.jonmsterling.com/jms-005P.xml">
              <fr:frontmatter>
                <fr:anchor>254</fr:anchor>
                <fr:addr type="user">elaboration-intuition</fr:addr>
                <fr:route>elaboration-intuition.xml</fr:route>
                <fr:title text="Elaboration, Intuitively">Elaboration, Intuitively</fr:title>
                <fr:taxon>Discussion</fr:taxon>
                <fr:authors />
              </fr:frontmatter>
              <fr:mainmatter>
                <fr:p>Elaboration is a concept that pops up in every proof assistant, but what is it? Intuitively, elaboration seems to have two main qualities:
  <fr:ol><fr:li>It functions somewhat like <fr:link type="local" href="macro-expansion.xml" addr="macro-expansion" title="Macro Expansion">macro expansion</fr:link>. Given some term in the <fr:link type="local" href="vernacular.xml" addr="vernacular" title="Vernacular Languages">vernacular</fr:link>, an elaborator will lower it down to a term in the <fr:link type="local" href="kernel.xml" addr="kernel" title="Kernel Languages">kernel language</fr:link>.</fr:li>
    <fr:li>It involves reconstruction of information left implicit by the user.</fr:li></fr:ol></fr:p>
                <fr:p>The key thing that makes this like macro expansion is that the kernel term that the vernacular term expanded to may be <fr:em>observed</fr:em> by the user. If you write a term in a type signature and look at the goal the system gives you for the definition, you're going to see the kernel term. Kernel terms are not necessarily human-readable, so pretty-printing will likely do a lot of work to massage the goal into a nice form, but this is purely syntactic tricks, the term is ultimately still in the kernel language.</fr:p>
                <fr:p>Expanding a bit on the second quality: For instance, the elaborator may perform type inference to fill a metavariable, or perform typeclass resolution to fill a class obligation, or use the type of an expression to determine what notation scope to interpret it in. All of these things are information that the elaborator implicitly reconstructs for the user.</fr:p>
              </fr:mainmatter>
              <fr:backmatter />
            </fr:tree>
            <fr:tree toc="true" numbered="true" show-heading="true" show-metadata="false" expanded="true" root="false" xmlns:fr="http://www.jonmsterling.com/jms-005P.xml">
              <fr:frontmatter>
                <fr:anchor>255</fr:anchor>
                <fr:addr type="user">macro-elab-definition</fr:addr>
                <fr:route>macro-elab-definition.xml</fr:route>
                <fr:title text="A Macro-Based Explanation of Elaboration">A Macro-Based Explanation of Elaboration</fr:title>
                <fr:taxon>Discussion</fr:taxon>
                <fr:authors />
              </fr:frontmatter>
              <fr:mainmatter>
                <fr:p>A preliminary definition of <fr:link type="local" href="elaboration.xml" addr="elaboration" title="Elaboration">elaboration</fr:link> we may use essentially just captures the initial <fr:link type="local" href="elaboration-intuition.xml" addr="elaboration-intuition" title="Elaboration, Intuitively">intuition for elaboration</fr:link> in a more systematic way. An elaborator is quite literally just a set of syntactic macro rules which may both spawn and solve <fr:em>metavariables</fr:em>. Furthermore the macros have access to the <fr:em>goal type</fr:em>, which captures the type-directed nature of elaboration.</fr:p>
                <fr:p>The macro rules are permitted to executed arbitrary code in some metalanguage, which allows for typeclass resolution, unification, and etc to be implemented. This is essentially the direction that Lean 4 seems to have gone -- the user at any point may insert arbitrary definitions of new syntax and transformations on that syntax, and elaboration recursively expands macros until it cannot anymore.</fr:p>
                <fr:p>This definition is very unsatisfying mathematically though! This is because all it does is capture the initial intuition. Tt provides no new information nor insights into what elaboration <fr:em>should</fr:em> be, nor what it is in relation to the rest of mathematics. Thus this definition is unsuitable for a formalization of elaboration.</fr:p>
              </fr:mainmatter>
              <fr:backmatter />
            </fr:tree>
            <fr:tree toc="true" numbered="true" show-heading="true" show-metadata="false" expanded="true" root="false" xmlns:fr="http://www.jonmsterling.com/jms-005P.xml">
              <fr:frontmatter>
                <fr:anchor>256</fr:anchor>
                <fr:addr type="user">elaboration-formal</fr:addr>
                <fr:route>elaboration-formal.xml</fr:route>
                <fr:title text="Elaboration, Formally">Elaboration, Formally</fr:title>
                <fr:taxon>Definition</fr:taxon>
                <fr:authors />
              </fr:frontmatter>
              <fr:mainmatter>
                <fr:tree toc="true" numbered="true" show-heading="true" show-metadata="false" expanded="true" root="false" xmlns:fr="http://www.jonmsterling.com/jms-005P.xml">
                  <fr:frontmatter>
                    <fr:anchor>257</fr:anchor>
                    <fr:addr type="user">why-formal-elab</fr:addr>
                    <fr:route>why-formal-elab.xml</fr:route>
                    <fr:title text="Why Formalize Elaboration?">Why Formalize Elaboration?</fr:title>
                    <fr:taxon>Remark</fr:taxon>
                    <fr:authors />
                  </fr:frontmatter>
                  <fr:mainmatter>
                    <fr:p>Formally defining elaboration is important for two broad reasons.
  <fr:ol><fr:li>It forces us to determine what elaboration <fr:em>should</fr:em> be. What do the "best" examples of elaborators look like, and how do we determine what a "bad" elaborator is?</fr:li>
    <fr:li>It paves the way for developing abstractions in the space of elaborators. This allows for reusable software components to be developed, which is essential to <fr:link type="local" href="proof-assistant-explosion.xml" addr="proof-assistant-explosion" title="Constructing Proof Assistants">making construction of proof assistants easier</fr:link>.</fr:li></fr:ol></fr:p>
                  </fr:mainmatter>
                  <fr:backmatter />
                </fr:tree>
                <fr:p>TODO: Write this</fr:p>
              </fr:mainmatter>
              <fr:backmatter />
            </fr:tree>
          </fr:mainmatter>
          <fr:backmatter />
        </fr:tree>
      </fr:mainmatter>
      <fr:backmatter />
    </fr:tree>
    <fr:tree toc="false" numbered="false" show-heading="true" show-metadata="false" expanded="true" root="false" xmlns:fr="http://www.jonmsterling.com/jms-005P.xml">
      <fr:frontmatter>
        <fr:title text="Backlinks">Backlinks</fr:title>
        <fr:authors />
      </fr:frontmatter>
      <fr:mainmatter>
        <fr:tree toc="true" numbered="false" show-heading="true" show-metadata="true" expanded="false" root="false" xmlns:fr="http://www.jonmsterling.com/jms-005P.xml">
          <fr:frontmatter>
            <fr:anchor>258</fr:anchor>
            <fr:addr type="user">pages</fr:addr>
            <fr:route>pages.xml</fr:route>
            <fr:title text="All Pages">All Pages</fr:title>
            <fr:authors />
          </fr:frontmatter>
          <fr:mainmatter>
            <fr:p>
              <fr:ul>
                <fr:li><fr:strong>Definition</fr:strong>. <fr:link type="local" href="admissible-rule.xml" addr="admissible-rule" title="Admissible Rules">Admissible Rules</fr:link></fr:li>
                <fr:li><fr:strong>Definition</fr:strong>. <fr:link type="local" href="elaboration-formal.xml" addr="elaboration-formal" title="Elaboration, Formally">Elaboration, Formally</fr:link></fr:li>
                <fr:li><fr:strong>Discussion</fr:strong>. <fr:link type="local" href="elaboration-intuition.xml" addr="elaboration-intuition" title="Elaboration, Intuitively">Elaboration, Intuitively</fr:link></fr:li>
                <fr:li><fr:strong>Definition</fr:strong>. <fr:link type="local" href="elaboration.xml" addr="elaboration" title="Elaboration">Elaboration</fr:link></fr:li>
                <fr:li><fr:strong>Definition</fr:strong>. <fr:link type="local" href="first-order-theory.xml" addr="first-order-theory" title="Theories">Theories</fr:link></fr:li>
                <fr:li><fr:strong>Definition</fr:strong>. <fr:link type="local" href="judgement.xml" addr="judgement" title="Judgements">Judgements</fr:link></fr:li>
                <fr:li><fr:strong>Discussion</fr:strong>. <fr:link type="local" href="judgements-disc.xml" addr="judgements-disc" title="Judgements">Judgements</fr:link></fr:li>
                <fr:li><fr:strong>Definition</fr:strong>. <fr:link type="local" href="kernel.xml" addr="kernel" title="Kernel Languages">Kernel Languages</fr:link></fr:li>
                <fr:li><fr:strong>Discussion</fr:strong>. <fr:link type="local" href="macro-elab-definition.xml" addr="macro-elab-definition" title="A Macro-Based Explanation of Elaboration">A Macro-Based Explanation of Elaboration</fr:link></fr:li>
                <fr:li><fr:strong>Definition</fr:strong>. <fr:link type="local" href="macro-expansion.xml" addr="macro-expansion" title="Macro Expansion">Macro Expansion</fr:link></fr:li>
                <fr:li><fr:strong>Remark</fr:strong>. <fr:link type="local" href="programming-language-explosion.xml" addr="programming-language-explosion" title="Continued Explosion of Programming Languages">Continued Explosion of Programming Languages</fr:link></fr:li>
                <fr:li><fr:strong>Problem</fr:strong>. <fr:link type="local" href="proof-assistant-explosion.xml" addr="proof-assistant-explosion" title="Constructing Proof Assistants">Constructing Proof Assistants</fr:link></fr:li>
                <fr:li><fr:strong>Remark</fr:strong>. <fr:link type="local" href="readable-theorems.xml" addr="readable-theorems" title="Should Kernel Theorems be Readable?">Should Kernel Theorems be Readable?</fr:link></fr:li>
                <fr:li><fr:strong>Remark</fr:strong>. <fr:link type="local" href="rel-judgements-fol.xml" addr="rel-judgements-fol" title="Judgements and FOL">Judgements and FOL</fr:link></fr:li>
                <fr:li><fr:strong>Remark</fr:strong>. <fr:link type="local" href="rel-judgements-natural-deduction.xml" addr="rel-judgements-natural-deduction" title="Judgements and Natural Deduction">Judgements and Natural Deduction</fr:link></fr:li>
                <fr:li><fr:strong>Definition</fr:strong>. <fr:link type="local" href="signature.xml" addr="signature" title="Signatures">Signatures</fr:link></fr:li>
                <fr:li><fr:strong>Lemma</fr:strong>. <fr:link type="local" href="srs-eager-is-eager.xml" addr="srs-eager-is-eager" title="Eager Evaluation is Eager">Eager Evaluation is Eager</fr:link></fr:li>
                <fr:li><fr:strong>Proof</fr:strong>. <fr:link type="local" href="srs-eager-prop-proof.xml" addr="srs-eager-prop-proof" title="Local Rewriting Preserves Normal Forms">Local Rewriting Preserves Normal Forms</fr:link></fr:li>
                <fr:li><fr:strong>Theorem</fr:strong>. <fr:link type="local" href="srs-eager-prop.xml" addr="srs-eager-prop" title="Local Rewriting Preserves Normal Forms">Local Rewriting Preserves Normal Forms</fr:link></fr:li>
                <fr:li><fr:strong>Theorem</fr:strong>. <fr:link type="local" href="srs-eager-twice-noop.xml" addr="srs-eager-twice-noop" title="Normalizing Normalize Does Nothing">Normalizing Normalize Does Nothing</fr:link></fr:li>
                <fr:li><fr:strong>Definition</fr:strong>. <fr:link type="local" href="srs-eager.xml" addr="srs-eager" title="Eager Evaluation in String Rewrite Systems">Eager Evaluation in String Rewrite Systems</fr:link></fr:li>
                <fr:li><fr:strong>Definition</fr:strong>. <fr:link type="local" href="string-rewrite-system.xml" addr="string-rewrite-system" title="String Rewrite System">String Rewrite System</fr:link></fr:li>
                <fr:li><fr:strong>Definition</fr:strong>. <fr:link type="local" href="tactics.xml" addr="tactics" title="Tactics">Tactics</fr:link></fr:li>
                <fr:li><fr:strong>Definition</fr:strong>. <fr:link type="local" href="vernacular.xml" addr="vernacular" title="Vernacular Languages">Vernacular Languages</fr:link></fr:li>
                <fr:li><fr:strong>Remark</fr:strong>. <fr:link type="local" href="why-formal-elab.xml" addr="why-formal-elab" title="Why Formalize Elaboration?">Why Formalize Elaboration?</fr:link></fr:li>
              </fr:ul>
            </fr:p>
          </fr:mainmatter>
          <fr:backmatter />
        </fr:tree>
      </fr:mainmatter>
      <fr:backmatter />
    </fr:tree>
    <fr:tree toc="false" numbered="false" show-heading="true" show-metadata="false" expanded="true" root="false" xmlns:fr="http://www.jonmsterling.com/jms-005P.xml">
      <fr:frontmatter>
        <fr:title text="Related">Related</fr:title>
        <fr:authors />
      </fr:frontmatter>
      <fr:mainmatter>
        <fr:tree toc="true" numbered="false" show-heading="true" show-metadata="true" expanded="false" root="false" xmlns:fr="http://www.jonmsterling.com/jms-005P.xml">
          <fr:frontmatter>
            <fr:anchor>259</fr:anchor>
            <fr:addr type="user">elaboration</fr:addr>
            <fr:route>elaboration.xml</fr:route>
            <fr:title text="Elaboration">Elaboration</fr:title>
            <fr:taxon>Definition</fr:taxon>
            <fr:authors />
          </fr:frontmatter>
          <fr:mainmatter>
            <fr:tree toc="true" numbered="true" show-heading="true" show-metadata="false" expanded="true" root="false" xmlns:fr="http://www.jonmsterling.com/jms-005P.xml">
              <fr:frontmatter>
                <fr:anchor>254</fr:anchor>
                <fr:addr type="user">elaboration-intuition</fr:addr>
                <fr:route>elaboration-intuition.xml</fr:route>
                <fr:title text="Elaboration, Intuitively">Elaboration, Intuitively</fr:title>
                <fr:taxon>Discussion</fr:taxon>
                <fr:authors />
              </fr:frontmatter>
              <fr:mainmatter>
                <fr:p>Elaboration is a concept that pops up in every proof assistant, but what is it? Intuitively, elaboration seems to have two main qualities:
  <fr:ol><fr:li>It functions somewhat like <fr:link type="local" href="macro-expansion.xml" addr="macro-expansion" title="Macro Expansion">macro expansion</fr:link>. Given some term in the <fr:link type="local" href="vernacular.xml" addr="vernacular" title="Vernacular Languages">vernacular</fr:link>, an elaborator will lower it down to a term in the <fr:link type="local" href="kernel.xml" addr="kernel" title="Kernel Languages">kernel language</fr:link>.</fr:li>
    <fr:li>It involves reconstruction of information left implicit by the user.</fr:li></fr:ol></fr:p>
                <fr:p>The key thing that makes this like macro expansion is that the kernel term that the vernacular term expanded to may be <fr:em>observed</fr:em> by the user. If you write a term in a type signature and look at the goal the system gives you for the definition, you're going to see the kernel term. Kernel terms are not necessarily human-readable, so pretty-printing will likely do a lot of work to massage the goal into a nice form, but this is purely syntactic tricks, the term is ultimately still in the kernel language.</fr:p>
                <fr:p>Expanding a bit on the second quality: For instance, the elaborator may perform type inference to fill a metavariable, or perform typeclass resolution to fill a class obligation, or use the type of an expression to determine what notation scope to interpret it in. All of these things are information that the elaborator implicitly reconstructs for the user.</fr:p>
              </fr:mainmatter>
              <fr:backmatter />
            </fr:tree>
            <fr:tree toc="true" numbered="true" show-heading="true" show-metadata="false" expanded="true" root="false" xmlns:fr="http://www.jonmsterling.com/jms-005P.xml">
              <fr:frontmatter>
                <fr:anchor>255</fr:anchor>
                <fr:addr type="user">macro-elab-definition</fr:addr>
                <fr:route>macro-elab-definition.xml</fr:route>
                <fr:title text="A Macro-Based Explanation of Elaboration">A Macro-Based Explanation of Elaboration</fr:title>
                <fr:taxon>Discussion</fr:taxon>
                <fr:authors />
              </fr:frontmatter>
              <fr:mainmatter>
                <fr:p>A preliminary definition of <fr:link type="local" href="elaboration.xml" addr="elaboration" title="Elaboration">elaboration</fr:link> we may use essentially just captures the initial <fr:link type="local" href="elaboration-intuition.xml" addr="elaboration-intuition" title="Elaboration, Intuitively">intuition for elaboration</fr:link> in a more systematic way. An elaborator is quite literally just a set of syntactic macro rules which may both spawn and solve <fr:em>metavariables</fr:em>. Furthermore the macros have access to the <fr:em>goal type</fr:em>, which captures the type-directed nature of elaboration.</fr:p>
                <fr:p>The macro rules are permitted to executed arbitrary code in some metalanguage, which allows for typeclass resolution, unification, and etc to be implemented. This is essentially the direction that Lean 4 seems to have gone -- the user at any point may insert arbitrary definitions of new syntax and transformations on that syntax, and elaboration recursively expands macros until it cannot anymore.</fr:p>
                <fr:p>This definition is very unsatisfying mathematically though! This is because all it does is capture the initial intuition. Tt provides no new information nor insights into what elaboration <fr:em>should</fr:em> be, nor what it is in relation to the rest of mathematics. Thus this definition is unsuitable for a formalization of elaboration.</fr:p>
              </fr:mainmatter>
              <fr:backmatter />
            </fr:tree>
            <fr:tree toc="true" numbered="true" show-heading="true" show-metadata="false" expanded="true" root="false" xmlns:fr="http://www.jonmsterling.com/jms-005P.xml">
              <fr:frontmatter>
                <fr:anchor>256</fr:anchor>
                <fr:addr type="user">elaboration-formal</fr:addr>
                <fr:route>elaboration-formal.xml</fr:route>
                <fr:title text="Elaboration, Formally">Elaboration, Formally</fr:title>
                <fr:taxon>Definition</fr:taxon>
                <fr:authors />
              </fr:frontmatter>
              <fr:mainmatter>
                <fr:tree toc="true" numbered="true" show-heading="true" show-metadata="false" expanded="true" root="false" xmlns:fr="http://www.jonmsterling.com/jms-005P.xml">
                  <fr:frontmatter>
                    <fr:anchor>257</fr:anchor>
                    <fr:addr type="user">why-formal-elab</fr:addr>
                    <fr:route>why-formal-elab.xml</fr:route>
                    <fr:title text="Why Formalize Elaboration?">Why Formalize Elaboration?</fr:title>
                    <fr:taxon>Remark</fr:taxon>
                    <fr:authors />
                  </fr:frontmatter>
                  <fr:mainmatter>
                    <fr:p>Formally defining elaboration is important for two broad reasons.
  <fr:ol><fr:li>It forces us to determine what elaboration <fr:em>should</fr:em> be. What do the "best" examples of elaborators look like, and how do we determine what a "bad" elaborator is?</fr:li>
    <fr:li>It paves the way for developing abstractions in the space of elaborators. This allows for reusable software components to be developed, which is essential to <fr:link type="local" href="proof-assistant-explosion.xml" addr="proof-assistant-explosion" title="Constructing Proof Assistants">making construction of proof assistants easier</fr:link>.</fr:li></fr:ol></fr:p>
                  </fr:mainmatter>
                  <fr:backmatter />
                </fr:tree>
                <fr:p>TODO: Write this</fr:p>
              </fr:mainmatter>
              <fr:backmatter />
            </fr:tree>
          </fr:mainmatter>
          <fr:backmatter />
        </fr:tree>
        <fr:tree toc="true" numbered="false" show-heading="true" show-metadata="true" expanded="false" root="false" xmlns:fr="http://www.jonmsterling.com/jms-005P.xml">
          <fr:frontmatter>
            <fr:anchor>260</fr:anchor>
            <fr:addr type="user">elaboration-intuition</fr:addr>
            <fr:route>elaboration-intuition.xml</fr:route>
            <fr:title text="Elaboration, Intuitively">Elaboration, Intuitively</fr:title>
            <fr:taxon>Discussion</fr:taxon>
            <fr:authors />
          </fr:frontmatter>
          <fr:mainmatter>
            <fr:p>Elaboration is a concept that pops up in every proof assistant, but what is it? Intuitively, elaboration seems to have two main qualities:
  <fr:ol><fr:li>It functions somewhat like <fr:link type="local" href="macro-expansion.xml" addr="macro-expansion" title="Macro Expansion">macro expansion</fr:link>. Given some term in the <fr:link type="local" href="vernacular.xml" addr="vernacular" title="Vernacular Languages">vernacular</fr:link>, an elaborator will lower it down to a term in the <fr:link type="local" href="kernel.xml" addr="kernel" title="Kernel Languages">kernel language</fr:link>.</fr:li>
    <fr:li>It involves reconstruction of information left implicit by the user.</fr:li></fr:ol></fr:p>
            <fr:p>The key thing that makes this like macro expansion is that the kernel term that the vernacular term expanded to may be <fr:em>observed</fr:em> by the user. If you write a term in a type signature and look at the goal the system gives you for the definition, you're going to see the kernel term. Kernel terms are not necessarily human-readable, so pretty-printing will likely do a lot of work to massage the goal into a nice form, but this is purely syntactic tricks, the term is ultimately still in the kernel language.</fr:p>
            <fr:p>Expanding a bit on the second quality: For instance, the elaborator may perform type inference to fill a metavariable, or perform typeclass resolution to fill a class obligation, or use the type of an expression to determine what notation scope to interpret it in. All of these things are information that the elaborator implicitly reconstructs for the user.</fr:p>
          </fr:mainmatter>
          <fr:backmatter />
        </fr:tree>
      </fr:mainmatter>
      <fr:backmatter />
    </fr:tree>
  </fr:backmatter>
</fr:tree>
